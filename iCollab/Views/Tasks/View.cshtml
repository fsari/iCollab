@using iCollab.Infra.Extensions
@using iCollab.ViewModels
@using Microsoft.AspNet.Identity
@using Model
@using Core.Extensions

@model TaskViewModel
@{
    ViewBag.Title = Model.Title;
}

<aside class="right-side">
    <section class="content-header">
        <h1 class="pull-left">
            <a href="/Tasks">Görevler </a> <i class="fa fa-angle-double-right"></i> @Model.Title

            @if (Model.IsLate)
            {
                <i class="fa fa fa-flag pull-right" style="color:red"> @Model.LateDays Gün geç kalmış.</i><br />
            }
        </h1>
        <div class="pull-right">

            @if (Model.TaskOwner.UserName == User.Identity.GetUserName())
            {
                <a href="/Tasks/Edit/@Model.Id"><i class="glyphicon glyphicon-edit"></i></a>
                <a href="/Tasks/Delete/@Model.Id" onclick="return confirm('Silmek istediğinize emin misiniz?');"><i class="glyphicon glyphicon-trash btn-lg"></i></a>
            }
            <a href="/Tasks/Index"><i class="glyphicon glyphicon-list btn-lg"></i></a>

        </div>
        <div class="clearfix"></div>
    </section>

    <section class="content">
        <div class="row">
            <div class="col-md-8">
                <div class="box">
                    <div class="box-body table-responsive no-padding" style="margin-left: 10px; margin-right: 10px;">

                        <div class="pull-left">
                            @{ Html.RenderAction("RenderUserDetails", "Users", new { username = Model.TaskOwner.UserName });}
                        </div>
                        <div class="pull-right" style="margin-top: 20px;">
                            <strong>@Model.DateCreated.FormatDate()</strong>
                        </div>
                        <div class="clearfix"></div>
                        <br /><br />
                        <div class="pull-left">
                            @if (Model.Project != null)
                            {
                                <strong>Proje : </strong>
                                @Html.ActionLink(Model.Project.Title, "View", "Projects", new { id = Model.Project.Id }, null)<br />
                            }

                            <strong>Durumu : </strong>
                            <a href="#" id="taskstatus" data-type="select" data-source="@Url.Action("GetTaskStatus")" data-value="@Model.TaskStatus" class="editable-click">@Model.TaskStatus</a>
                            <br />

                            <strong>Önceliği : </strong>
                            <a href="#" id="taskpriority" data-type="select" data-source="@Url.Action("GetTaskPriority")" data-value="@Model.Priority" class="editable-click">@Model.Priority</a>
                            <br />

                            <strong>Türü : </strong>
                            <a href="#" id="tasktype" data-type="select" data-source="@Url.Action("GetTaskTypes")" data-value="@Model.TaskType.DisplayName()" class="editable-click">@Model.TaskType.DisplayName()</a>
                            <br />

                            <strong><i class="fa fa-user"></i> Atananlar: </strong>
                            @foreach (var u in Model.SelectedUsers)
                            {
                                <label class="label label-default">@u</label>
                            }
                        </div>
                        <div class="pull-right">
                            <strong><i class="fa fa-clock-o"></i> Başlangıç : </strong> @Html.DisplayFor(m => m.Start) <br />
                            <strong><i class="fa fa-clock-o"></i> Bitiş : </strong> @Html.DisplayFor(m => m.End) <br />
                        </div>
                        <div class="clearfix"></div>
                        @if (Model.ParentTask != null)
                        {
                            <span><strong>Üst görev: @Html.ActionLink(@Model.ParentTask.Title, "View", "Tasks", new { id = Model.ParentTask.Id }, null) </strong></span>
                        }
                        <hr />

                        @if (Model.TaskStatus != TaskStatus.Tamamlandı && Model.SelectedUsers.Any(x => x == User.Identity.GetUserName()))
                        {
                            <div class="well">
                                <div class="col-md-4">
                                    @if (Model.TaskStatus == TaskStatus.Planlandı)
                                    {
                                        <a href="/Tasks/Begin/@Model.Id" class="btn btn-success btn-sm"> Başla </a>
                                    }
                                </div>

                                <div class="col-md-4">
                                    @if (Model.TaskStatus == TaskStatus.Aktif)
                                    {
                                        <input id="ex1" style="width: 100%;" data-slider-id='ex1Slider' type="text" data-slider-min="0" data-slider-max="100" data-slider-step="10" data-slider-value="@Model.Progress" />
                                    }
                                </div>

                                <div class="col-md-4">
                                    @if (Model.TaskStatus != TaskStatus.Tamamlandı && Model.TaskStatus == TaskStatus.Aktif)
                                    {
                                        <div class="pull-right">
                                            <div class="btn-group">
                                                @Html.ActionLink("Tamamla", "CompleteTask", "Tasks", new { id = Model.Id }, new { @class = "btn btn-primary btn-sm", onclick = "return confirm('Tamamlamak istediğinizden emin misiniz?');" })
                                            </div>
                                        </div>
                                        <div class="clearfix"></div>
                                    }

                                </div>

                                <div class="clearfix"></div>
                            </div>
                        }

                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
            <div class="col-xs-4">
                <div class="box">
                    <div class="box-body">
                        @{Html.RenderPartial("_Attachment", new AttachmentViewModel
                          {
                              Attachments = Model.Attachments,
                              RemovePath = "/Tasks/RemoveAttachment/?taskId=" + Model.Id,
                              UploadPath = "/Tasks/Upload/?id=" + Model.Id
                          });
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (string.IsNullOrEmpty(Model.Description) == false)
        {
            <div class="row">
                <div class="col-xs-8">
                    <div class="box">
                        <h4 class="header"><i class="fa fa-pencil"></i> Açıklama</h4>
                        <div class="box-body table-responsive no-padding">
                            @Html.Raw(HttpUtility.HtmlDecode(Model.Description));
                        </div>
                    </div>
                </div>
            </div>
        }

        @*        <div class="row">
                 <div class="col-xs-6">
                    <div class="box">
                        <div class="box-header" style="margin: 10px;">
                            <h3 class='box-title pull-left'>Alt Görevler</h3>
                            <div class="pull-right">
                                @Html.ActionLink("Alt görev ekle", "AddSubTask", "Tasks", new { parentId = Model.Id }, new { @class = "btn btn-sm btn-primary" })
                            </div>
                            <div class="clearfix"></div>
                        </div>
                        <div class="box-body table-responsive no-padding">
                            @if (Model.SubTasks != null && Model.SubTasks.Count > 0)
                            {
                                { Html.RenderPartial("_TaskTable", Model.SubTasks); }
                            }
                            else
                            {
                                <div class="callout callout-info">
                                    Herhangi bir alt görev yok. Yeni bir alt görev oluşturmak için :
                                    @Html.ActionLink("Alt görev ekle", "AddSubTask", "Tasks", new { parentId = Model.Id }, new { @class = "btn btn-sm btn-primary" })
                                </div>
                            }
                        </div>
                    </div>
                </div>

            </div>*@
    </section>
</aside>

<script>
    $(document).ready(function () {

        $('#ex1').slider({
            formatter: function (value) {
                return '%' + value;
            }
        });

        $("#ex1").on("slideStop", function (slideEvt) {

            $.ajax({
                method: "POST",
                url: "/Tasks/ChangeProgress",
                data: { progress: slideEvt.value, id: "@Model.Id" }
            });

            if (slideEvt.value == 100) {
                $("#ex1").slider("disable");
            }
        });


        //toggle `popup` / `inline` mode
        $.fn.editable.defaults.mode = 'inline';

        $('#taskstatus').editable({
            type: 'select',
            placement: 'right',
            value: 2,
            source: function () {
                var result;
                $.ajax({
                    url: '/Tasks/GetTaskStatus',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        result = data;
                    }
                });
                return result;
            }
            , pk: '@Model.Id'
            , url: '/Tasks/ChangeStatus'
            , success: function (response, newValue) {
                if (response != 'ok') return response;
            }
        });


        $('#taskpriority').editable({
            type: 'select',
            placement: 'right',
            value: 2,
            source: function () {
                var result;
                $.ajax({
                    url: '/Tasks/GetTaskPriority',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        result = data;
                    }
                });
                return result;
            }
            , pk: '@Model.Id'
            , url: '/Tasks/ChangePriority'
            , success: function (response, newValue) {
                if (response != 'ok') return response;
            }
        });

        $('#tasktype').editable({
            type: 'select',
            placement: 'right',
            value: 2,
            source: function () {
                var result;
                $.ajax({
                    url: '/Tasks/GetTaskType',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        result = data;
                    }
                });
                return result;
            }
            , pk: '@Model.Id'
            , url: '/Tasks/ChangeTaskType'
            , success: function (response, newValue) {
                if (response != 'ok') return response;
            }
        });

    });

</script>